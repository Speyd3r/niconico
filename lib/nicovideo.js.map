{"version":3,"sources":["nicovideo.coffee"],"names":[],"mappings":"AAAA,IAAA,uFAAA;;AAAA,KAAA,GAAiB,OAAA,CAAQ,OAAR,CAAjB,CAAA;;AAAA,EACA,GAAiB,OAAA,CAAQ,IAAR,CADjB,CAAA;;AAAA,IAEA,GAAiB,OAAA,CAAQ,MAAR,CAFjB,CAAA;;AAAA,WAGA,GAAiB,OAAA,CAAQ,aAAR,CAHjB,CAAA;;AAAA,OAIA,GAAiB,OAAA,CAAQ,SAAR,CAJjB,CAAA;;AAAA,cAKiB,OAAA,CAAQ,QAAR,EAAhB,WALD,CAAA;;AAAA,eAMiB,OAAA,CAAQ,QAAR,EAAhB,YAND,CAAA;;AAAA,OAOA,GAAiB,OAAA,CAAQ,UAAR,CAPjB,CAAA;;AAAA,CAQA,GAAiB,OAAA,CAAQ,QAAR,CARjB,CAAA;;AAAA,OAUA,GAAU,OAAO,CAAC,QAAR,CAAiB;AAAA,EAAA,GAAA,EAAK,IAAL;CAAjB,CAVV,CAAA;;AAAA;AAaE,EAAA,YAAA,CAAA;AAEa,EAAA,mBAAC,OAAD,GAAA;AACX,IAAA,IAAC,CAAA,KAAD,GAAS,OAAO,CAAC,KAAjB,CAAA;AAAA,IACA,IAAC,CAAA,QAAD,GAAY,OAAO,CAAC,QADpB,CADW;EAAA,CAFb;;AAAA,sBAMA,OAAA,GAAS,SAAA,GAAA;WACH,IAAA,OAAA,CAAQ,SAAC,OAAD,EAAU,MAAV,GAAA;AACV,UAAA,OAAA;AAAA,MAAA,OAAA,GACE;AAAA,QAAA,GAAA,EAAK,wDAAL;AAAA,QACA,IAAA,EACE;AAAA,UAAA,IAAA,EAAM,SAAS,CAAC,KAAhB;AAAA,UACA,QAAA,EAAU,SAAS,CAAC,QADpB;SAFF;OADF,CAAA;aAKA,OAAO,CAAC,IAAR,CAAa,OAAb,EAAsB,SAAC,KAAD,EAAQ,QAAR,EAAkB,IAAlB,GAAA;AACpB,QAAA,IAAG,KAAH;AACE,UAAA,MAAA,CAAO,QAAQ,CAAC,UAAhB,CAAA,CAAA;AACA,gBAAA,CAFF;SAAA;AAAA,QAGA,OAAO,CAAC,GAAR,CAAY,eAAZ,EAA6B,QAAQ,CAAC,UAAtC,CAHA,CAAA;eAIA,OAAA,CAAQ,QAAQ,CAAC,UAAjB,EALoB;MAAA,CAAtB,EANU;IAAA,CAAR,EADG;EAAA,CANT,CAAA;;AAAA,sBAoBA,gBAAA,GAAkB,SAAC,QAAD,GAAA;WACZ,IAAA,OAAA,CAAQ,SAAC,OAAD,EAAU,MAAV,GAAA;AACV,UAAA,OAAA;AAAA,MAAA,OAAA,GACE;AAAA,QAAA,GAAA,EAAK,gCAAA,GAAmC,QAAxC;OADF,CAAA;aAGA,OAAO,CAAC,GAAR,CAAY,OAAZ,EAAqB,SAAC,KAAD,EAAQ,QAAR,EAAkB,IAAlB,GAAA;AACnB,QAAA,IAAG,KAAH;AACE,UAAA,MAAA,CAAO,QAAQ,CAAC,UAAhB,CAAA,CAAA;AACA,gBAAA,CAFF;SAAA;AAAA,QAIA,OAAO,CAAC,GAAR,CAAY,iCAAZ,EAA+C,QAAQ,CAAC,UAAxD,CAJA,CAAA;eAMA,OAAA,CAAQ,QAAQ,CAAC,UAAjB,EAPmB;MAAA,CAArB,EAJU;IAAA,CAAR,EADY;EAAA,CApBlB,CAAA;;AAAA,sBAkCA,OAAA,GAAS,SAAC,QAAD,GAAA;WACH,IAAA,OAAA,CAAQ,SAAC,OAAD,EAAU,MAAV,GAAA;AACV,UAAA,OAAA;AAAA,MAAA,OAAA,GACE;AAAA,QAAA,GAAA,EAAK,uCAAA,GAA0C,QAA/C;OADF,CAAA;aAGA,OAAO,CAAC,GAAR,CAAY,OAAZ,EAAqB,SAAC,KAAD,EAAQ,QAAR,EAAkB,IAAlB,GAAA;AACnB,YAAA,OAAA;AAAA,QAAA,IAAG,KAAH;AACE,UAAA,MAAA,CAAO,QAAQ,CAAC,UAAhB,CAAA,CAAA;AACA,gBAAA,CAFF;SAAA;AAAA,QAIA,OAAO,CAAC,GAAR,CAAY,QAAZ,EAAsB,IAAtB,CAJA,CAAA;AAAA,QAKA,OAAA,GACE;AAAA,UAAA,SAAA,EAAW,IAAI,CAAC,KAAL,CAAW,GAAX,CAAgB,CAAA,CAAA,CAAE,CAAC,KAAnB,CAAyB,GAAzB,CAA8B,CAAA,CAAA,CAAzC;AAAA,UACA,GAAA,EAAK,WAAW,CAAC,QAAZ,CAAqB,IAAI,CAAC,KAAL,CAAW,GAAX,CAAgB,CAAA,CAAA,CAAE,CAAC,KAAnB,CAAyB,GAAzB,CAA8B,CAAA,CAAA,CAAnD,CADL;SANF,CAAA;eASA,OAAA,CAAQ,OAAR,EAVmB;MAAA,CAArB,EAJU;IAAA,CAAR,EADG;EAAA,CAlCT,CAAA;;AAAA,sBAmDA,aAAA,GAAe,SAAC,QAAD,GAAA;WACT,IAAA,OAAA,CAAQ,SAAC,OAAD,EAAU,MAAV,GAAA;AACV,UAAA,OAAA;AAAA,MAAA,OAAA,GACE;AAAA,QAAA,GAAA,EAAK,2CAAA,GAA8C,QAAnD;OADF,CAAA;aAGA,OAAO,CAAC,GAAR,CAAY,OAAZ,EAAqB,SAAC,KAAD,EAAQ,QAAR,EAAkB,IAAlB,GAAA;AACnB,QAAA,IAAG,KAAH;AACE,UAAA,MAAA,CAAO,QAAQ,CAAC,UAAhB,CAAA,CAAA;AACA,gBAAA,CAFF;SAAA;eAIA,WAAA,CAAY,IAAZ,EAAkB,SAAC,UAAD,EAAa,MAAb,GAAA;AAChB,cAAA,SAAA;AAAA,UAAA,IAAG,UAAH;AACE,YAAA,MAAA,CAAO,KAAP,CAAA,CAAA;AACA,kBAAA,CAFF;WAAA;AAAA,UAIA,SAAA,GACE;AAAA,YAAA,QAAA,EAAU,MAAM,CAAC,wBAAwB,CAAC,KAAM,CAAA,CAAA,CAAE,CAAC,QAAS,CAAA,CAAA,CAA5D;AAAA,YACA,KAAA,EAAO,MAAM,CAAC,wBAAwB,CAAC,KAAM,CAAA,CAAA,CAAE,CAAC,KAAM,CAAA,CAAA,CADtD;AAAA,YAEA,WAAA,EAAa,MAAM,CAAC,wBAAwB,CAAC,KAAM,CAAA,CAAA,CAAE,CAAC,WAAY,CAAA,CAAA,CAFlE;AAAA,YAGA,SAAA,EAAW,MAAM,CAAC,wBAAwB,CAAC,KAAM,CAAA,CAAA,CAAE,CAAC,SAAU,CAAA,CAAA,CAH9D;AAAA,YAIA,UAAA,EAAY,MAAM,CAAC,wBAAwB,CAAC,KAAM,CAAA,CAAA,CAAE,CAAC,UAAW,CAAA,CAAA,CAJhE;WALF,CAAA;iBAWA,OAAA,CAAQ,SAAR,EAZgB;QAAA,CAAlB,EALmB;MAAA,CAArB,EAJU;IAAA,CAAR,EADS;EAAA,CAnDf,CAAA;;AAAA,sBA2EA,WAAA,GAAa,SAAC,GAAD,EAAM,IAAN,GAAA;WACP,IAAA,OAAA,CAAQ,SAAC,OAAD,EAAU,MAAV,GAAA;aACV,OAAO,CAAC,IAAR,CAAa,GAAb,EAAkB,SAAC,GAAD,EAAM,GAAN,EAAW,IAAX,GAAA;AAChB,YAAA,GAAA;AAAA,QAAA,GAAA,GAAM,OAAA,CAAQ,GAAR,CAAY,CAAC,IAAb,CAAkB,EAAE,CAAC,iBAAH,CAAqB,IAArB,CAAlB,CAAN,CAAA;eACA,GAAG,CAAC,EAAJ,CAAO,QAAP,EAAiB,OAAjB,EAFgB;MAAA,CAAlB,EADU;IAAA,CAAR,EADO;EAAA,CA3Eb,CAAA;;AAAA,sBAiFA,QAAA,GAAU,SAAC,QAAD,GAAA;WACJ,IAAA,OAAA,CAAQ,SAAC,OAAD,EAAU,MAAV,GAAA;AACV,UAAA,UAAA;AAAA,MAAA,IAAA,GAAO,EAAP,CAAA;AAAA,MACA,IAAA,GAAO,IADP,CAAA;aAGA,IAAC,CAAA,OAAD,CAAA,CAAU,CAAC,IAAX,CAAgB,SAAC,OAAD,GAAA;eACd,IAAI,CAAC,gBAAL,CAAsB,QAAtB,EADc;MAAA,CAAhB,CAEC,CAAC,IAFF,CAEO,SAAC,OAAD,GAAA;eACL,IAAI,CAAC,OAAL,CAAa,QAAb,EADK;MAAA,CAFP,CAIC,CAAC,IAJF,CAIO,SAAC,QAAD,GAAA;AACL,QAAA,IAAA,GAAO,CAAC,CAAC,MAAF,CAAS,IAAT,EAAe,QAAf,CAAP,CAAA;eACA,IAAI,CAAC,aAAL,CAAmB,QAAnB,EAFK;MAAA,CAJP,CAOC,CAAC,IAPF,CAOO,SAAC,UAAD,GAAA;AACL,YAAA,sBAAA;AAAA,QAAA,IAAA,GAAO,CAAC,CAAC,MAAF,CAAS,IAAT,EAAe,UAAf,CAAP,CAAA;AAAA,QACA,YAAA,GAAe,IAAI,CAAC,KAAK,CAAC,OAAX,CAAmB,KAAnB,EAA0B,GAA1B,CADf,CAAA;AAAA,QAEA,QAAA,GAAW,EAAA,GAAK,YAAL,GAAoB,GAApB,GAA0B,IAAI,CAAC,UAF1C,CAAA;AAAA,QAGA,IAAI,CAAC,QAAL,GAAgB,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,IAAI,CAAC,MAAf,EAAuB,QAAvB,CAAb,CAHhB,CAAA;eAIA,WAAA,CAAY,IAAI,CAAC,GAAjB,EAAsB,IAAI,CAAC,QAA3B,EALK;MAAA,CAPP,CAaC,CAAC,IAbF,CAaO,SAAA,GAAA;eACL,OAAA,CAAQ,IAAI,CAAC,QAAb,EADK;MAAA,CAbP,CAeC,CAAC,IAfF,CAAA,EAJU;IAAA,CAAR,EADI;EAAA,CAjFV,CAAA;;mBAAA;;IAbF,CAAA;;AAAA,MAoHM,CAAC,OAAP,GAAiB,SApHjB,CAAA","file":"nicovideo.js","sourceRoot":"/source/","sourcesContent":["async          = require 'async'\nfs             = require 'fs'\npath           = require 'path'\nquerystring    = require 'querystring'\nrequest        = require 'request'\n{parseString}  = require 'xml2js'\n{EventEmitter} = require 'events'\nPromise        = require 'bluebird'\n_              = require 'lodash'\n\nrequest = request.defaults jar: true\n\nclass Nicovideo\n  'use strict'\n\n  constructor: (options) ->\n    @email = options.email\n    @password = options.password\n\n  sign_in: ->\n    new Promise (resolve, reject) ->\n      options =\n        url: 'https://secure.nicovideo.jp/secure/login?site=niconico'\n        form:\n          mail: Nicovideo.email\n          password: Nicovideo.password\n      request.post options, (error, response, body) ->\n        if error\n          reject response.statusCode\n          return\n        console.log 'Login success', response.statusCode\n        resolve response.statusCode\n\n  fetch_video_page: (video_id) ->\n    new Promise (resolve, reject) ->\n      options =\n        url: 'http://www.nicovideo.jp/watch/' + video_id\n\n      request.get options, (error, response, body) ->\n        if error\n          reject response.statusCode\n          return\n\n        console.log 'Video page accessing is success', response.statusCode\n\n        resolve response.statusCode\n\n  get_flv: (video_id) ->\n    new Promise (resolve, reject) ->\n      options =\n        url: 'http://www.nicovideo.jp/api/getflv?v=' + video_id\n\n      request.get options, (error, response, body) ->\n        if error\n          reject response.statusCode\n          return\n\n        console.log 'getflv', body\n        flvinfo =\n          thread_id: body.split('&')[0].split('=')[1]\n          url: querystring.unescape(body.split('&')[2].split('=')[1])\n\n        resolve flvinfo\n\n  get_thumbinfo: (video_id) ->\n    new Promise (resolve, reject) ->\n      options =\n        url: 'http://ext.nicovideo.jp/api/getthumbinfo/' + video_id\n\n      request.get options, (error, response, body) ->\n        if error\n          reject response.statusCode\n          return\n\n        parseString body, (parseError, result) ->\n          if parseError\n            reject error\n            return\n\n          thumbinfo =\n            video_id: result.nicovideo_thumb_response.thumb[0].video_id[0]\n            title: result.nicovideo_thumb_response.thumb[0].title[0]\n            description: result.nicovideo_thumb_response.thumb[0].description[0]\n            watch_url: result.nicovideo_thumb_response.thumb[0].watch_url[0]\n            movie_type: result.nicovideo_thumb_response.thumb[0].movie_type[0]\n\n          resolve thumbinfo\n\n  http_export: (uri, path) ->\n    new Promise (resolve, reject) ->\n      request.head uri, (err, res, body) ->\n        req = request(uri).pipe(fs.createWriteStream(path))\n        req.on 'finish', resolve\n\n  download: (video_id) ->\n    new Promise (resolve, reject) ->\n      meta = {}\n      self = this\n\n      @sign_in().then((_status) ->\n        self.fetch_video_page video_id\n      ).then((_status) ->\n        self.get_flv video_id\n      ).then((_flvinfo) ->\n        meta = _.extend(meta, _flvinfo)\n        self.get_thumbinfo video_id\n      ).then((_thumbinfo) ->\n        meta = _.extend(meta, _thumbinfo)\n        escapedTitle = meta.title.replace(/\\//g, '／')\n        filename = '' + escapedTitle + '.' + meta.movie_type\n        meta.filepath = path.resolve(path.join(self.output, filename))\n        http_export meta.url, meta.filepath\n      ).then(->\n        resolve meta.filepath\n      ).done()\n\nmodule.exports = Nicovideo\n"]}